generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  name      String?
  email     String    @unique
  password  String
  role      String    @default("user")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  session   Session[]
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime
}

model Store {
  id         String     @id @default(uuid())
  name       String
  userId     String
  banners    Banner[]   @relation("StoreToBanner")
  categories Category[] @relation("StoreToCategory")
  product    Product[]  @relation("StoreToProduct")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Banner {
  id             String     @id @default(uuid())
  storeid        String
  store          Store      @relation("StoreToBanner", fields: [storeid], references: [id], onDelete: Cascade)
  label          String
  imageUrl       String
  categoryBanner String?
  categories     Category[] @relation("BannerToCategory")
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  @@index([storeid])
}

model Category {
  id       String    @id @default(uuid())
  storeid  String
  store    Store     @relation("StoreToCategory", fields: [storeid], references: [id], onDelete: Cascade)
  bannerid String
  banner   Banner    @relation("BannerToCategory", fields: [bannerid], references: [id], onDelete: Cascade)
  name     String
  product  Product[] @relation("CategoryToProduct")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeid])
  @@index([bannerid])
}

model Product {
  id               String   @id @default(uuid())
  storeid          String
  store            Store    @relation("StoreToProduct", fields: [storeid], references: [id], onDelete: Cascade)
  categoryid       String
  category         Category @relation("CategoryToProduct", fields: [categoryid], references: [id], onDelete: Cascade)
  name             String
  price            Decimal
  description      String?
  shortDescription String?
  tag              Tag[]    @relation("ProductToTag")
  isFeatured       Boolean  @default(false)
  isArchived       Boolean  @default(false)
  stars            Float    @default(0.0)
  images           Images[] @relation("ProductToImages")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeid])
  @@index([categoryid])
}

model Tag {
  id      String    @id @default(uuid())
  name    String    @unique
  product Product[] @relation("ProductToTag")
}

model Images {
  id        String  @unique @default(uuid())
  productid String
  product   Product @relation("ProductToImages", fields: [productid], references: [id], onDelete: Cascade)
  url       String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productid])
}
