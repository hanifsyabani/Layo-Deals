// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Store {
  id         String     @id @default(uuid())
  name       String
  userId     String
  banners    Banner[]   @relation("StoreToBanner")
  categories Category[] @relation("StoreToCategory")
  product    Product[]  @relation("StoreToProduct")
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Banner {
  id         String     @id @default(uuid())
  storeid    String
  store      Store      @relation("StoreToBanner", fields: [storeid], references: [id])
  label      String
  imageUrl   String
  categories Category[] @relation("BannerToCategory")
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@index([storeid])
}

model Category {
  id       String    @id @default(uuid())
  storeid  String
  store    Store     @relation("StoreToCategory", fields: [storeid], references: [id])
  bannerid String
  banner   Banner    @relation("BannerToCategory", fields: [bannerid], references: [id])
  name     String
  product  Product[] @relation("CategoryToProduct")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeid])
  @@index([bannerid])
}

model Product {
  id         String   @id @default(uuid())
  storeid    String
  store      Store    @relation("StoreToProduct", fields: [storeid], references: [id])
  categoryid String
  category   Category @relation("CategoryToProduct", fields: [categoryid], references: [id])
  name       String
  price      Decimal
  isFeatured Boolean  @default(false)
  isArchived Boolean  @default(false)
  images     Images[] @relation("ProductToImages")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeid])
  @@index([categoryid])
}

model Images {
  id        String  @unique @default(uuid())
  productid String
  product   Product @relation("ProductToImages", fields: [productid], references: [id], onDelete: Cascade)
  url       String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productid])
}
